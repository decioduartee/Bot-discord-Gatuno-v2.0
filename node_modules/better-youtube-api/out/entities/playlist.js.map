{"version":3,"sources":["../src/entities/playlist.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA;;GAEG;AACH,MAAa,QAAQ;IA4FnB,YAAa,OAAgB,EAAE,IAAI;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAClB,CAAC;IAED;;OAEG;IACK,KAAK,CAAE,IAAI;QACjB,IAAI,IAAI,CAAC,IAAI,KAAK,kBAAkB,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAA;YAErB,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAA;YACrB,0BAA0B;YAC1B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAA;YAChE,0BAA0B;YAC1B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAA;YACrF,0BAA0B;YAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAA;SACzE;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,sBAAsB,EAAE;YAC/C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAA;SAC7B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;SACvD;QAED,0BAA0B;QAC1B,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAA;YAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA;YACvC,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAA;SAC1C;QAED,IAAI,CAAC,GAAG,GAAG,qCAAqC,IAAI,CAAC,EAAE,EAAE,CAAA;QACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,KAAK,kBAAkB,CAAA;IAC9C,CAAC;IAED;;OAEG;IACU,WAAW,CAAE,aAAqB,CAAC,CAAC;;YAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;YACtE,OAAO,IAAI,CAAC,MAAM,CAAA;QACpB,CAAC;KAAA;IAED;;;OAGG;IACU,KAAK;;YAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACxD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACtC,CAAC;KAAA;;AAlJH,4BAmJC;AAlJC;;GAEG;AACW,iBAAQ,GAAG,WAAW,CAAA;AAEpC;;GAEG;AACW,aAAI,GAAG,+BAA+B,CAAA;AAEpD;;GAEG;AACW,eAAM,GAAG,iHAAiH,CAAA","file":"playlist.js","sourcesContent":["import { YouTube, Video, Thumbnail } from '..'\n\n/**\n * A YouTube playlist.\n */\nexport class Playlist {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'playlists'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,player'\n\n  /**\n   * The fields to request for this entity.\n   */\n  public static fields = 'items(kind,id,snippet(tags,title,channelId,publishedAt,thumbnails),contentDetails(itemCount),player(embedHtml))'\n\n  /**\n   * The YouTube object that created this playlist.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data of this playlist.\n   */\n  public data: any\n\n  /**\n   * Whether or not this is a full playlist object.\n   */\n  public full: boolean\n\n  /**\n   * The ID of this playlist.\n   */\n  public id: string\n\n  /**\n   * The title of the playlist.\n   */\n  public title: string\n\n  /**\n   * The description of the playlist.\n   */\n  public description: string\n\n  /**\n   * The videos in the playlist. Only available after calling `Playlist#fetchVideos()`.\n   */\n  public videos: Video[]\n\n  /**\n   * The ID of the creator of the playlist.\n   */\n  public creatorId: string\n\n  /**\n   * The url of the playlist.\n   */\n  public url: string\n\n  /**\n   * The date the playlist was created.\n   */\n  public dateCreated: Date\n\n  /**\n   * The thumbnails for the playlist.\n   */\n  public thumbnails: {\n    default?: Thumbnail,\n    high?: Thumbnail,\n    maxres?: Thumbnail\n    medium?: Thumbnail,\n    standard?: Thumbnail\n  }\n\n  /**\n   * The number of items in the playlist.\n   */\n  public length: number\n\n  /**\n   * An <iframe> tag that embeds a player that will play the playlist.\n   */\n  public embedHtml: string\n\n  /**\n   * The tags of the playlist.\n   */\n  public tags: string[]\n\n  constructor (youtube: YouTube, data) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  /**\n   * @ignore\n   */\n  private _init (data) {\n    if (data.kind === 'youtube#playlist') {\n      const playlist = data\n\n      this.id = playlist.id\n      /* istanbul ignore next */\n      this.tags = playlist.snippet ? playlist.snippet.tags : undefined\n      /* istanbul ignore next */\n      this.length = playlist.contentDetails ? playlist.contentDetails.itemCount : undefined\n      /* istanbul ignore next */\n      this.embedHtml = playlist.player ? playlist.player.embedHtml : undefined\n    } else if (data.kind === 'youtube#searchResult') {\n      this.id = data.id.playlistId\n    } else {\n      throw new Error(`Invalid playlist type: ${data.kind}`)\n    }\n\n    /* istanbul ignore next */\n    if (data.snippet) {\n      this.title = data.snippet.title\n      this.creatorId = data.snippet.channelId\n      this.dateCreated = new Date(data.snippet.publishedAt)\n      this.thumbnails = data.snippet.thumbnails\n    }\n\n    this.url = `https://youtube.com/playlist?list=${this.id}`\n    this.full = data.kind === 'youtube#playlist'\n  }\n\n  /**\n   * Adds every video in this playlist to the `videos` property of this playlist.\n   */\n  public async fetchVideos (maxResults: number = -1) {\n    this.videos = await this.youtube.getPlaylistItems(this.id, maxResults)\n    return this.videos\n  }\n\n  /**\n   * Fetches this playlist and reassigns this object to the new playlist object.\n   * Only useful if `this.full` is false, or if you want updated playlist info.\n   */\n  public async fetch () {\n    const playlist = await this.youtube.getPlaylist(this.id)\n    return Object.assign(this, playlist)\n  }\n}\n"],"sourceRoot":"../../src"}