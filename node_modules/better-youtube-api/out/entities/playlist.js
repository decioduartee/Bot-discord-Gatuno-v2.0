"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A YouTube playlist.
 */
class Playlist {
    constructor(youtube, data) {
        this.youtube = youtube;
        this.data = data;
        this._init(data);
    }
    /**
     * @ignore
     */
    _init(data) {
        if (data.kind === 'youtube#playlist') {
            const playlist = data;
            this.id = playlist.id;
            /* istanbul ignore next */
            this.tags = playlist.snippet ? playlist.snippet.tags : undefined;
            /* istanbul ignore next */
            this.length = playlist.contentDetails ? playlist.contentDetails.itemCount : undefined;
            /* istanbul ignore next */
            this.embedHtml = playlist.player ? playlist.player.embedHtml : undefined;
        }
        else if (data.kind === 'youtube#searchResult') {
            this.id = data.id.playlistId;
        }
        else {
            throw new Error(`Invalid playlist type: ${data.kind}`);
        }
        /* istanbul ignore next */
        if (data.snippet) {
            this.title = data.snippet.title;
            this.creatorId = data.snippet.channelId;
            this.dateCreated = new Date(data.snippet.publishedAt);
            this.thumbnails = data.snippet.thumbnails;
        }
        this.url = `https://youtube.com/playlist?list=${this.id}`;
        this.full = data.kind === 'youtube#playlist';
    }
    /**
     * Adds every video in this playlist to the `videos` property of this playlist.
     */
    fetchVideos(maxResults = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            this.videos = yield this.youtube.getPlaylistItems(this.id, maxResults);
            return this.videos;
        });
    }
    /**
     * Fetches this playlist and reassigns this object to the new playlist object.
     * Only useful if `this.full` is false, or if you want updated playlist info.
     */
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const playlist = yield this.youtube.getPlaylist(this.id);
            return Object.assign(this, playlist);
        });
    }
}
exports.Playlist = Playlist;
/**
 * The name of the endpoint used for this entity.
 */
Playlist.endpoint = 'playlists';
/**
 * The parts to request for this entity.
 */
Playlist.part = 'snippet,contentDetails,player';
/**
 * The fields to request for this entity.
 */
Playlist.fields = 'items(kind,id,snippet(tags,title,channelId,publishedAt,thumbnails),contentDetails(itemCount),player(embedHtml))';

//# sourceMappingURL=playlist.js.map
