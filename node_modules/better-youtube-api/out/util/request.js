"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = require("https");
const url_1 = require("url");
/**
 * @ignore
 */
/* istanbul ignore next */
class Request {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
    }
    api(subUrl, params, token, type) {
        const url = this.baseUrl + (subUrl.startsWith('/') ? '' : '/') + subUrl + this.parseParams(params) +
            (type === 'key' ? (params ? `&key=${token}` : `?key=${token}`) : '');
        return this.get(url, type === 'oauth' ? token : undefined);
    }
    post(subUrl, params, token, data) {
        const url = this.baseUrl + (subUrl.startsWith('/') ? '' : '/') + subUrl + this.parseParams(params);
        return this._post(url, data, token);
    }
    put(subUrl, params, token, data) {
        const url = this.baseUrl + (subUrl.startsWith('/') ? '' : '/') + subUrl + this.parseParams(params);
        return this._put(url, data, token);
    }
    get(url, token) {
        const options = this.parseUrlToOptions(url, 'GET');
        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }
        return this.req(options, req => this.reqCallback(req));
    }
    _post(url, data, token) {
        const options = this.parseUrlToOptions(url, 'POST');
        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }
        return this.req(options, req => this.reqCallback(req, data));
    }
    _put(url, data, token) {
        const options = this.parseUrlToOptions(url, 'PUT');
        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }
        return this.req(options, req => this.reqCallback(req, data));
    }
    parseUrlToOptions(url, type) {
        const parsed = url_1.parse(url);
        return {
            hostname: parsed.hostname,
            port: parsed.port ? parsed.port : 443,
            path: parsed.path,
            method: type,
            headers: {
                'Content-Type': 'application/json'
            }
        };
    }
    req(options, reqFunction) {
        return new Promise((resolve, reject) => {
            const cb = (res) => {
                let data = '';
                res.setEncoding('utf8');
                res.on('data', chunk => {
                    data += chunk;
                });
                res.on('end', () => {
                    if (res.statusCode === 404) {
                        return reject(new Error('Not found'));
                    }
                    const parsed = JSON.parse(data);
                    if (parsed.error) {
                        return reject(new Error(parsed.error.message));
                    }
                    return resolve(parsed);
                });
                res.on('error', error => {
                    return reject(error);
                });
            };
            reqFunction(https_1.request(options, cb));
        });
    }
    reqCallback(req, data) {
        req.on('error', error => {
            throw error;
        });
        if (data) {
            req.write(data);
        }
        req.end();
    }
    parseParams(params) {
        let url = '';
        for (let param in params) {
            url += (!url.includes('?') ? '?' : '&') + param + '=' + params[param];
        }
        return url;
    }
}
exports.Request = Request;

//# sourceMappingURL=request.js.map
