"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const entities_1 = require("./entities");
const util_1 = require("./util");
const oauth_1 = require("./oauth");
const services_1 = require("./services");
__export(require("./entities"));
/**
 * The main class used to interact with the YouTube API. Use this.
 */
class YouTube {
    /**
     *
     * @param token Your YouTube Data API v3 token. Don't share this with anybody.
     * It could be an API key or an OAuth 2.0 token.
     * @param options Caching options. Recommended to change.
     */
    constructor(token, options = { cache: true, cacheTTL: 600, cacheCheckInterval: 600, cacheSearches: true }) {
        /**
         * @ignore
         */
        this._request = new util_1.Request('https://www.googleapis.com/youtube/v3');
        this.token = token;
        this.oauth = new oauth_1.OAuth(this);
        this._shouldCache = options.cache;
        this._cacheSearches = options.cacheSearches;
        this._cacheTTL = options.cacheTTL;
        if (options.cacheCheckInterval > 0) {
            setInterval(util_1.Cache.checkTTLs, options.cacheCheckInterval * 1000);
        }
    }
    get token() {
        return this._token;
    }
    set token(val) {
        this._token = val;
        this._tokenType = val.startsWith('ya29') ? 'oauth' : 'key';
    }
    /**
     * @ignore
     */
    _cache(id, value) {
        if (!this._shouldCache) {
            return;
        }
        util_1.Cache.set(id, value, this._cacheTTL > 0 ? this._cacheTTL * 1000 + new Date().getTime() : 0);
    }
    /**
     * Search supported entities on YouTube.
     * @param types An array of types to search for. May be a single type or multiple types.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    search(types, searchTerm, maxResults = 10, pageToken) {
        return services_1.SearchService.search(this, types, searchTerm, maxResults, pageToken);
    }
    /**
     * Search videos on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchVideos(searchTerm, maxResults = 10, pageToken) {
        return this.search([entities_1.Video], searchTerm, maxResults, pageToken);
    }
    /**
     * Search channels on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchChannels(searchTerm, maxResults = 10, pageToken) {
        return this.search([entities_1.Channel], searchTerm, maxResults, pageToken);
    }
    /**
     * Search playlists on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchPlaylists(searchTerm, maxResults = 10, pageToken) {
        return this.search([entities_1.Playlist], searchTerm, maxResults, pageToken);
    }
    /**
     * Get a [[Video]] object from the URL, ID, or Title of a video.
     * @param videoResolvable The URL, ID, or Title of the video.
     */
    getVideo(videoResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, videoResolvable, entities_1.Video);
            return services_1.GenericService.getItemById(this, entities_1.Video, id);
        });
    }
    /**
     * Get a [[Channel]] object from the Username, URL or ID of a channel.
     * @param channelResolvable The Username, URL or ID of the channel.
     */
    getChannel(channelResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getItemById(this, entities_1.Channel, id);
        });
    }
    /**
     * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     */
    getPlaylist(playlistResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, playlistResolvable, entities_1.Playlist);
            return services_1.GenericService.getItemById(this, entities_1.Playlist, id);
        });
    }
    /**
     * Get a [[Comment]] object from the ID of a comment.
     * @param id The ID of the comment.
     */
    getComment(commentId) {
        return services_1.GenericService.getItemById(this, entities_1.YTComment, commentId);
    }
    /**
     * Get a video object from the url of a video.
     * @deprecated Use getVideo() instead
     * @param url The url of the video.
     */
    /* istanbul ignore next */
    getVideoByUrl(url) {
        const id = util_1.Parser.parseUrl(url);
        if (!id.video) {
            return Promise.reject('Not a valid video url');
        }
        return services_1.GenericService.getItemById(this, entities_1.Video, id.video);
    }
    /**
     * Get a channel object from the url of a channel.
     * @deprecated Use getChannel() instead
     * @param url The url of the channel.
     */
    /* istanbul ignore next */
    getChannelByUrl(url) {
        const id = util_1.Parser.parseUrl(url);
        if (!id.channel) {
            return Promise.reject('Not a valid channel url');
        }
        return services_1.GenericService.getItemById(this, entities_1.Channel, id.channel);
    }
    /**
     * Get a playlist object from the url of a playlist.
     * @deprecated Use getPlaylist() instead
     * @param url The url of the playlist.
     */
    /* istanbul ignore next */
    getPlaylistByUrl(url) {
        const id = util_1.Parser.parseUrl(url);
        if (!id.playlist) {
            return Promise.reject('Not a valid playlist url');
        }
        return services_1.GenericService.getItemById(this, entities_1.Playlist, id.playlist);
    }
    /**
     * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.
     */
    getPlaylistItems(playlistResolvable, maxResults = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const playlistId = yield services_1.GenericService.getId(this, playlistResolvable, entities_1.Playlist);
            return services_1.GenericService.getPaginatedItems(this, 'playlistItems', playlistId, maxResults);
        });
    }
    /**
     * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.
     */
    getVideoComments(videoResolvable, maxResults = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const videoId = yield services_1.GenericService.getId(this, videoResolvable, entities_1.Video);
            return services_1.GenericService.getPaginatedItems(this, 'commentThreads:video', videoId, maxResults);
        });
    }
    /**
     * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of comments to get from the channel. If <= 0 or not included, returns all comments on the channel.
     */
    getChannelComments(channelResolvable, maxResults = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'commentThreads:channel', channelId, maxResults);
        });
    }
    /**
     * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of playlists to get from the channel. If <= 0 or not included, returns all playlists.
     */
    getChannelPlaylists(channelResolvable, maxResults = -1) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'playlists:channel', channelId, maxResults);
        });
    }
    /**
     * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.
     * @param commentId The ID of the comment to get replies from.
     * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.
     */
    getCommentReplies(commentId, maxResults = -1) {
        return services_1.GenericService.getPaginatedItems(this, 'comments', commentId, maxResults);
    }
}
exports.YouTube = YouTube;
exports.default = YouTube;

//# sourceMappingURL=index.js.map
