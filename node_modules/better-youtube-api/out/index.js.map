{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Video, Channel, Playlist, YTComment } from './entities'\nimport { Parser, Cache, Request } from './util'\nimport { OAuth } from './oauth'\nimport { SearchService, GenericService } from './services'\n\nexport * from './entities'\nexport * from './types'\n\n/**\n * The main class used to interact with the YouTube API. Use this.\n */\nexport class YouTube {\n  /**\n   * @ignore\n   */\n  public _shouldCache: boolean\n\n  /**\n   * @ignore\n   */\n  public _cacheSearches: boolean\n\n  /**\n   * @ignore\n   */\n  public _cacheTTL: number\n\n  /**\n   * @ignore\n   */\n  public _request = new Request('https://www.googleapis.com/youtube/v3')\n\n  public _tokenType: 'key' | 'oauth'\n\n  /**\n   * @ignore\n   */\n  private _token: string\n\n  get token (): string {\n    return this._token\n  }\n  set token (val: string) {\n    this._token = val\n    this._tokenType = val.startsWith('ya29') ? 'oauth' : 'key'\n  }\n\n  /**\n   * Methods requiring an OAuth token\n   */\n  public oauth: OAuth\n\n  /**\n   *\n   * @param token Your YouTube Data API v3 token. Don't share this with anybody.\n   * It could be an API key or an OAuth 2.0 token.\n   * @param options Caching options. Recommended to change.\n   */\n  constructor (token: string, options: YouTubeOptions = { cache: true, cacheTTL: 600, cacheCheckInterval: 600, cacheSearches: true }) {\n    this.token = token\n\n    this.oauth = new OAuth(this)\n\n    this._shouldCache = options.cache\n    this._cacheSearches = options.cacheSearches\n    this._cacheTTL = options.cacheTTL\n\n    if (options.cacheCheckInterval > 0) {\n      setInterval(Cache.checkTTLs, options.cacheCheckInterval * 1000)\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public _cache (id: string, value: any) {\n    if (!this._shouldCache) {\n      return\n    }\n\n    Cache.set(id, value, this._cacheTTL > 0 ? this._cacheTTL * 1000 + new Date().getTime() : 0)\n  }\n\n  /**\n   * Search supported entities on YouTube.\n   * @param types An array of types to search for. May be a single type or multiple types.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public search (types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return SearchService.search(this, types, searchTerm, maxResults, pageToken)\n  }\n\n  /**\n   * Search videos on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public searchVideos (searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return this.search([ Video ], searchTerm, maxResults, pageToken) as Promise<{ results: Video[], prevPageToken: string, nextPageToken: string }>\n  }\n\n  /**\n   * Search channels on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public searchChannels (searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return this.search([ Channel ], searchTerm, maxResults, pageToken) as Promise<{ results: Channel[], prevPageToken: string, nextPageToken: string }>\n  }\n\n  /**\n   * Search playlists on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.\n   */\n  public searchPlaylists (searchTerm: string, maxResults: number = 10, pageToken?: string) {\n    return this.search([ Playlist ], searchTerm, maxResults, pageToken) as Promise<{ results: Playlist[], prevPageToken: string, nextPageToken: string }>\n  }\n\n  /**\n   * Get a [[Video]] object from the URL, ID, or Title of a video.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   */\n  public async getVideo (videoResolvable: string) {\n    const id = await GenericService.getId(this, videoResolvable, Video)\n    return GenericService.getItemById(this, Video, id) as Promise<Video>\n  }\n\n  /**\n   * Get a [[Channel]] object from the Username, URL or ID of a channel.\n   * @param channelResolvable The Username, URL or ID of the channel.\n   */\n  public async getChannel (channelResolvable: string) {\n    const id = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getItemById(this, Channel, id) as Promise<Channel>\n  }\n\n  /**\n   * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   */\n  public async getPlaylist (playlistResolvable: string) {\n    const id = await GenericService.getId(this, playlistResolvable, Playlist)\n    return GenericService.getItemById(this, Playlist, id) as Promise<Playlist>\n  }\n\n  /**\n   * Get a [[Comment]] object from the ID of a comment.\n   * @param id The ID of the comment.\n   */\n  public getComment (commentId: string) {\n    return GenericService.getItemById(this, YTComment, commentId) as Promise<YTComment>\n  }\n\n  /**\n   * Get a video object from the url of a video.\n   * @deprecated Use getVideo() instead\n   * @param url The url of the video.\n   */\n  /* istanbul ignore next */\n  public getVideoByUrl (url: string) {\n    const id = Parser.parseUrl(url)\n\n    if (!id.video) {\n      return Promise.reject('Not a valid video url')\n    }\n\n    return GenericService.getItemById(this, Video, id.video) as Promise<Video>\n  }\n\n  /**\n   * Get a channel object from the url of a channel.\n   * @deprecated Use getChannel() instead\n   * @param url The url of the channel.\n   */\n  /* istanbul ignore next */\n  public getChannelByUrl (url: string) {\n    const id = Parser.parseUrl(url)\n\n    if (!id.channel) {\n      return Promise.reject('Not a valid channel url')\n    }\n\n    return GenericService.getItemById(this, Channel, id.channel) as Promise<Channel>\n  }\n\n  /**\n   * Get a playlist object from the url of a playlist.\n   * @deprecated Use getPlaylist() instead\n   * @param url The url of the playlist.\n   */\n  /* istanbul ignore next */\n  public getPlaylistByUrl (url: string) {\n    const id = Parser.parseUrl(url)\n\n    if (!id.playlist) {\n      return Promise.reject('Not a valid playlist url')\n    }\n\n    return GenericService.getItemById(this, Playlist, id.playlist) as Promise<Playlist>\n  }\n\n  /**\n   * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.\n   */\n  public async getPlaylistItems (playlistResolvable: string, maxResults: number = -1) {\n    const playlistId = await GenericService.getId(this, playlistResolvable, Playlist)\n    return GenericService.getPaginatedItems(this, 'playlistItems', playlistId, maxResults) as Promise<Video[]>\n  }\n\n  /**\n   * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.\n   */\n  public async getVideoComments (videoResolvable: string, maxResults: number = -1) {\n    const videoId = await GenericService.getId(this, videoResolvable, Video)\n    return GenericService.getPaginatedItems(this, 'commentThreads:video', videoId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of comments to get from the channel. If <= 0 or not included, returns all comments on the channel.\n   */\n  public async getChannelComments (channelResolvable: string, maxResults: number = -1) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'commentThreads:channel', channelId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of playlists to get from the channel. If <= 0 or not included, returns all playlists.\n   */\n  public async getChannelPlaylists (channelResolvable: string, maxResults: number = -1) {\n    const channelId = await GenericService.getId(this, channelResolvable, Channel)\n    return GenericService.getPaginatedItems(this, 'playlists:channel', channelId, maxResults) as Promise<Playlist[]>\n  }\n\n  /**\n   * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.\n   * @param commentId The ID of the comment to get replies from.\n   * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.\n   */\n  public getCommentReplies (commentId: string, maxResults: number = -1) {\n    return GenericService.getPaginatedItems(this, 'comments', commentId, maxResults) as Promise<YTComment[]>\n  }\n}\n\ntype YouTubeOptions = {\n  /**\n   * Whether or not to cache entities.\n   */\n  cache?: boolean\n\n  /**\n   * How long to cache entities in seconds (0 = unlimited).\n   */\n  cacheTTL?: number\n\n  /**\n   * How often to check for and delete expired cached items in seconds.\n   */\n  cacheCheckInterval?: number\n\n  /**\n   * Whether or not we should cache searches\n   */\n  cacheSearches?: boolean\n}\n\nexport default YouTube\n"],"sourceRoot":"../src"}