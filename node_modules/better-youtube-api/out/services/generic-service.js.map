{"version":3,"sources":["../src/services/generic-service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,0BAAiE;AACjE,kCAAuC;AAEvC;;GAEG;AACH,MAAa,cAAc;IACzB,0BAA0B;IACnB,MAAM,CAAO,WAAW,CAAE,OAAgB,EAAE,IAAwE,EAAE,EAAU;;YACrI,IAAI,CAAC,CAAC,CAAE,SAAK,EAAE,WAAO,EAAE,YAAQ,EAAE,aAAS,CAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC7D,OAAO,OAAO,CAAC,MAAM,CAAC,sDAAsD,CAAC,CAAA;aAC9E;YAED,MAAM,MAAM,GAAG,YAAK,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,CAAC,CAAA;YAExD,IAAI,OAAO,CAAC,YAAY,IAAI,MAAM,EAAE;gBAClC,OAAO,MAAM,CAAA;aACd;YAED,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACvD,EAAE;gBACF,MAAM,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvC,IAAI,EAAE,IAAI,KAAK,aAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI;aAC3G,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAA;YAErC,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,OAAO,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;aACxC;YAED,IAAI,SAAiD,CAAA;YAErD,IAAI,IAAI,KAAK,aAAS,EAAE;gBACtB,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;aACxG;iBAAM;gBACL,SAAS,GAAG,IAAK,IAAwD,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;aACpG;YAED,OAAO,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,SAAS,CAAC,CAAA;YAEzD,OAAO,SAAS,CAAA;QAClB,CAAC;KAAA;IAED,0BAA0B;IACnB,MAAM,CAAO,iBAAiB,CAAE,OAAgB,EAAE,QACO,EAAE,EAAU,EAAE,aAAqB,CAAC,CAAC;;YACnG,MAAM,MAAM,GAAG,YAAK,CAAC,GAAG,CAAC,SAAS,QAAQ,IAAI,EAAE,IAAI,UAAU,EAAE,CAAC,CAAA;YAEjE,IAAI,OAAO,CAAC,YAAY,IAAI,MAAM,EAAE;gBAClC,OAAO,MAAM,CAAA;aACd;YAED,IAAI,KAAK,GAAG,EAAE,CAAA;YAEd,MAAM,IAAI,GAAG,UAAU,IAAI,CAAC,CAAA;YAC5B,MAAM,OAAO,GAST;gBACF,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE,CAAC;aACd,CAAA;YAED,IAAI,GAAW,CAAA;YACf,IAAI,KAAwD,CAAA;YAC5D,IAAI,WAAgC,CAAA;YAEpC,IAAI,QAAQ,KAAK,eAAe,EAAE;gBAChC,GAAG,GAAG,EAAE,CAAA;gBACR,KAAK,GAAG,SAAK,CAAA;gBACb,OAAO,CAAC,UAAU,GAAG,EAAE,CAAA;aACxB;iBAAM,IAAI,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;gBAChD,GAAG,GAAG,GAAG,CAAA;gBACT,KAAK,GAAG,aAAS,CAAA;gBAEjB,MAAM,CAAC,EAAE,IAAI,CAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAA4B,CAAA;gBAEhE,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAA;gBACnC,QAAQ,GAAG,gBAAgB,CAAA;gBAC3B,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,CAAA;gBACzB,OAAO,CAAC,IAAI,IAAI,UAAU,CAAA;gBAC1B,OAAO,CAAC,UAAU,GAAG,WAAW,CAAA;aACjC;iBAAM,IAAI,QAAQ,KAAK,UAAU,EAAE;gBAClC,GAAG,GAAG,GAAG,CAAA;gBACT,KAAK,GAAG,aAAS,CAAA;gBACjB,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAA;aACtB;iBAAM,IAAI,QAAQ,KAAK,mBAAmB,EAAE;gBAC3C,GAAG,GAAG,EAAE,CAAA;gBACR,KAAK,GAAG,YAAQ,CAAA;gBAChB,QAAQ,GAAG,WAAW,CAAA;gBACtB,OAAO,CAAC,IAAI,IAAI,wBAAwB,CAAA;gBACxC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAA;aACvB;iBAAM;gBACL,OAAO,OAAO,CAAC,MAAM,CAAC,oBAAoB,GAAG,QAAQ,CAAC,CAAA;aACvD;YAED,IAAI,UAAU,GAAG,GAAG,EAAE;gBACpB,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,iBAAiB,QAAQ,EAAE,CAAC,CAAA;aAC7E;YAED,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAA;YAE5C,IAAI,OAAO,CAAA;YACX,IAAI,KAAK,GAAG,IAAI,CAAA;YAChB,IAAI,YAAY,GAAG,CAAC,IAAI,CAAA;YAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1C,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;oBACpG,OAAO,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;gBAC1C,CAAC,CAAC,CAAA;gBAEF,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;iBACzC;gBAED,IAAI,CAAC,KAAK,EAAE;oBACV,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAA;oBAEvE,IAAI,KAAK,IAAI,CAAC,EAAE;wBACd,YAAY,GAAG,IAAI,CAAA;qBACpB;oBAED,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;iBAC1B;gBAED,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC3B,IAAI,OAAkB,CAAA;oBAEtB,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;wBAChC,OAAO,GAAG,IAAI,aAAS,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAA;wBAC3E,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;qBACpB;yBAAM;wBACL,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,CAAA;qBAClD;oBAED,IAAI,IAAI,CAAC,OAAO,EAAE;wBAChB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;4BACpC,MAAM,OAAO,GAAG,IAAI,aAAS,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,CAAA;4BAC1D,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;wBAC/B,CAAC,CAAC,CAAA;qBACH;gBACH,CAAC,CAAC,CAAA;gBAEF,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,YAAY,EAAE;oBAC1C,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAA;iBAC1C;qBAAM;oBACL,OAAO,KAAK,CAAA;iBACb;aACF;YAED,OAAO,CAAC,MAAM,CAAC,SAAS,QAAQ,IAAI,EAAE,IAAI,UAAU,EAAE,EAAE,KAAK,CAAC,CAAA;YAE9D,OAAO,KAAK,CAAA;QACd,CAAC;KAAA;IAED,0BAA0B;IACnB,MAAM,CAAO,KAAK,CAAE,OAAgB,EAAE,KAAa,EAAE,IAAqD;;YAC/G,IAAI,EAAE,GAAW,IAAI,CAAA;YAErB,MAAM,MAAM,GAAG,YAAK,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAA;YAE9D,IAAI,MAAM,EAAE;gBACV,OAAO,MAAM,CAAA;aACd;YAED,MAAM,YAAY,GAA2C,YAAK,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,QAAQ,IAAI,KAAK,EAAE,CAAC,CAAA;YAEzG,IAAI,YAAY,IAAI,YAAY,CAAC,EAAE,EAAE;gBACnC,OAAO,YAAY,CAAC,EAAE,CAAA;aACvB;YAED,IAAI,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC/D,MAAM,SAAS,GAAG,aAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;gBAEjE,2CAA2C;gBAC3C,IAAI,IAAI,KAAK,WAAO,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBAChE,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;iBAC5L;gBAED,EAAE,GAAG,SAAS,CAAA;aACf;YAED,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,EAAE,EAAE;gBAChD,OAAO,EAAE,CAAA;aACV;YAED,IAAI,IAAI,KAAK,WAAO,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBACxE,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE;oBACxC,CAAC,EAAE,KAAK;oBACR,IAAI,EAAE,IAAI,CAAC,QAAQ;oBACnB,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;iBAC1B,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;aAClG;iBAAM,IAAI,IAAI,KAAK,YAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACnD,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE;oBACxC,CAAC,EAAE,KAAK;oBACR,IAAI,EAAE,IAAI,CAAC,QAAQ;oBACnB,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE,CAAC;iBACd,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;aACnG;iBAAM,IAAI,IAAI,KAAK,SAAK,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBACvE,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE;oBACxC,CAAC,EAAE,KAAK;oBACR,IAAI,EAAE,IAAI,CAAC,QAAQ;oBACnB,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE,CAAC;iBACd,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;aAChG;iBAAM;gBACL,EAAE,GAAG,KAAK,CAAA;aACX;YAED,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,EAAE,EAAE;gBAChD,OAAO,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;aACxC;YAED,OAAO,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,QAAQ,IAAI,KAAK,EAAE,EAAE,EAAE,CAAC,CAAA;YAExD,OAAO,EAAE,CAAA;QACX,CAAC;KAAA;CACF;AAzND,wCAyNC","file":"generic-service.js","sourcesContent":["import YouTube, { Video, Channel, Playlist, YTComment } from '..'\r\nimport { Cache, Parser } from '../util'\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class GenericService {\r\n  /* istanbul ignore next */\r\n  public static async getItemById (youtube: YouTube, type: typeof Video | typeof Channel | typeof Playlist | typeof YTComment, id: string): Promise<Video | Channel | Playlist | YTComment> {\r\n    if (!([ Video, Channel, Playlist, YTComment ].includes(type))) {\r\n      return Promise.reject('Type must be a video, channel, playlist, or comment.')\r\n    }\r\n\r\n    const cached = Cache.get(`get://${type.endpoint}/${id}`)\r\n\r\n    if (youtube._shouldCache && cached) {\r\n      return cached\r\n    }\r\n\r\n    const result = await youtube._request.api(type.endpoint, {\r\n      id,\r\n      fields: encodeURIComponent(type.fields),\r\n      part: type === YTComment ? !type.part.includes('snippet') ? type.part + ',snippet' : type.part : type.part\r\n    }, youtube.token, youtube._tokenType)\r\n\r\n    if (result.items.length === 0) {\r\n      return Promise.reject('Item not found')\r\n    }\r\n\r\n    let endResult: Video | Playlist | Channel | YTComment\r\n\r\n    if (type === YTComment) {\r\n      endResult = new type(youtube, result.items[0], result.items[0].snippet.channelId ? 'channel' : 'video')\r\n    } else {\r\n      endResult = new (type as typeof Video | typeof Channel | typeof Playlist)(youtube, result.items[0])\r\n    }\r\n\r\n    youtube._cache(`get://${type.endpoint}/${id}`, endResult)\r\n\r\n    return endResult\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  public static async getPaginatedItems (youtube: YouTube, endpoint: 'playlistItems' | 'playlists' | 'playlists:channel' | 'commentThreads' |\r\n    'commentThreads:video' | 'commentThreads:channel' | 'comments', id: string, maxResults: number = -1): Promise<Video[] | YTComment[] | Playlist[]> {\r\n    const cached = Cache.get(`get://${endpoint}/${id}/${maxResults}`)\r\n\r\n    if (youtube._shouldCache && cached) {\r\n      return cached\r\n    }\r\n\r\n    let items = []\r\n\r\n    const full = maxResults <= 0\r\n    const options: {\r\n      part: string,\r\n      maxResults: number,\r\n      videoId?: string,\r\n      parentId?: string,\r\n      textFormat?: string,\r\n      playlistId?: string,\r\n      channelId?: string,\r\n      pageToken?: string\r\n    } = {\r\n      part: 'snippet',\r\n      maxResults: 0\r\n    }\r\n\r\n    let max: number\r\n    let clazz: typeof Video | typeof YTComment | typeof Playlist\r\n    let commentType: 'video' | 'channel'\r\n\r\n    if (endpoint === 'playlistItems') {\r\n      max = 50\r\n      clazz = Video\r\n      options.playlistId = id\r\n    } else if (endpoint.startsWith('commentThreads')) {\r\n      max = 100\r\n      clazz = YTComment\r\n\r\n      const [, type ] = endpoint.split(':') as ('video' | 'channel')[]\r\n\r\n      commentType = type ? type : 'video'\r\n      endpoint = 'commentThreads'\r\n      options[`${type}Id`] = id\r\n      options.part += ',replies'\r\n      options.textFormat = 'plainText'\r\n    } else if (endpoint === 'comments') {\r\n      max = 100\r\n      clazz = YTComment\r\n      options.parentId = id\r\n    } else if (endpoint === 'playlists:channel') {\r\n      max = 50\r\n      clazz = Playlist\r\n      endpoint = 'playlists'\r\n      options.part += ',contentDetails,player'\r\n      options.channelId = id\r\n    } else {\r\n      return Promise.reject('Unknown item type ' + endpoint)\r\n    }\r\n\r\n    if (maxResults > max) {\r\n      return Promise.reject(`Max results must be ${max} or below for ${endpoint}`)\r\n    }\r\n\r\n    options.maxResults = full ? max : maxResults\r\n\r\n    let results\r\n    let pages = null\r\n    let shouldReturn = !full\r\n\r\n    for (let i = 1; i < pages ? pages : 3; i++) {\r\n      results = await youtube._request.api(endpoint, options, youtube.token, youtube._tokenType).catch(() => {\r\n        return Promise.reject('Items not found')\r\n      })\r\n\r\n      if (results.items.length === 0) {\r\n        return Promise.reject('Items not found')\r\n      }\r\n\r\n      if (!pages) {\r\n        pages = results.pageInfo.totalResults / results.pageInfo.resultsPerPage\r\n\r\n        if (pages <= 1) {\r\n          shouldReturn = true\r\n        }\r\n\r\n        pages = Math.floor(pages)\r\n      }\r\n\r\n      results.items.forEach(item => {\r\n        let comment: YTComment\r\n\r\n        if (item.snippet.topLevelComment) {\r\n          comment = new YTComment(youtube, item.snippet.topLevelComment, commentType)\r\n          items.push(comment)\r\n        } else {\r\n          items.push(new clazz(youtube, item, commentType))\r\n        }\r\n\r\n        if (item.replies) {\r\n          item.replies.comments.forEach(reply => {\r\n            const created = new YTComment(youtube, reply, commentType)\r\n            comment.replies.push(created)\r\n          })\r\n        }\r\n      })\r\n\r\n      if (results.nextPageToken && !shouldReturn) {\r\n        options.pageToken = results.nextPageToken\r\n      } else {\r\n        return items\r\n      }\r\n    }\r\n\r\n    youtube._cache(`get://${endpoint}/${id}/${maxResults}`, items)\r\n\r\n    return items\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  public static async getId (youtube: YouTube, input: string, type: typeof Video | typeof Channel | typeof Playlist): Promise<string> {\r\n    let id: string = null\r\n\r\n    const cached = Cache.get(`get_id://${type.endpoint}/${input}`)\r\n\r\n    if (cached) {\r\n      return cached\r\n    }\r\n\r\n    const cachedEntity: Video | Channel | Playlist | YTComment = Cache.get(`get://${type.endpoint}/${input}`)\r\n\r\n    if (cachedEntity && cachedEntity.id) {\r\n      return cachedEntity.id\r\n    }\r\n\r\n    if (input.includes('youtube.com') || input.includes('youtu.be')) {\r\n      const idFromUrl = Parser.parseUrl(input)[type.name.toLowerCase()]\r\n\r\n      // Custom channel URLs don't work that well\r\n      if (type === Channel && idFromUrl && !idFromUrl.startsWith('UC')) {\r\n        id = await youtube._request.api('search', { q: idFromUrl, type: type.endpoint, part: 'id' }, youtube.token, youtube._tokenType).then(r => r.items[0] ? r.items[0].id.channelId : undefined)\r\n      }\r\n\r\n      id = idFromUrl\r\n    }\r\n\r\n    if (id !== null && id !== undefined && id !== '') {\r\n      return id\r\n    }\r\n\r\n    if (type === Channel && (!input.startsWith('UC') || input.includes(' '))) {\r\n      id = await youtube._request.api('search', {\r\n        q: input,\r\n        type: type.endpoint,\r\n        part: 'id', maxResults: 1\r\n      }, youtube.token, youtube._tokenType).then(r => r.items[0] ? r.items[0].id.channelId : undefined)\r\n    } else if (type === Playlist && input.includes(' ')) {\r\n      id = await youtube._request.api('search', {\r\n        q: input,\r\n        type: type.endpoint,\r\n        part: 'id',\r\n        maxResults: 1\r\n      }, youtube.token, youtube._tokenType).then(r => r.items[0] ? r.items[0].id.playlistId : undefined)\r\n    } else if (type === Video && (input.length < 11 || input.includes(' '))) {\r\n      id = await youtube._request.api('search', {\r\n        q: input,\r\n        type: type.endpoint,\r\n        part: 'id',\r\n        maxResults: 1\r\n      }, youtube.token, youtube._tokenType).then(r => r.items[0] ? r.items[0].id.videoId : undefined)\r\n    } else {\r\n      id = input\r\n    }\r\n\r\n    if (id === null || id === undefined || id === '') {\r\n      return Promise.reject('Item not found')\r\n    }\r\n\r\n    youtube._cache(`get_id://${type.endpoint}/${input}`, id)\r\n\r\n    return id\r\n  }\r\n}\r\n"],"sourceRoot":"../../src"}