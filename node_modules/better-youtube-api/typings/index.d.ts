import { Video, Channel, Playlist, YTComment } from './entities';
import { Request } from './util';
import { OAuth } from './oauth';
export * from './entities';
export * from './types';
/**
 * The main class used to interact with the YouTube API. Use this.
 */
export declare class YouTube {
    /**
     * @ignore
     */
    _shouldCache: boolean;
    /**
     * @ignore
     */
    _cacheSearches: boolean;
    /**
     * @ignore
     */
    _cacheTTL: number;
    /**
     * @ignore
     */
    _request: Request;
    _tokenType: 'key' | 'oauth';
    /**
     * @ignore
     */
    private _token;
    token: string;
    /**
     * Methods requiring an OAuth token
     */
    oauth: OAuth;
    /**
     *
     * @param token Your YouTube Data API v3 token. Don't share this with anybody.
     * It could be an API key or an OAuth 2.0 token.
     * @param options Caching options. Recommended to change.
     */
    constructor(token: string, options?: YouTubeOptions);
    /**
     * @ignore
     */
    _cache(id: string, value: any): void;
    /**
     * Search supported entities on YouTube.
     * @param types An array of types to search for. May be a single type or multiple types.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    search(types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: (Video | Playlist | Channel)[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search videos on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchVideos(searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: Video[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search channels on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchChannels(searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: Channel[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Search playlists on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchPlaylists(searchTerm: string, maxResults?: number, pageToken?: string): Promise<{
        results: Playlist[];
        prevPageToken: string;
        nextPageToken: string;
    }>;
    /**
     * Get a [[Video]] object from the URL, ID, or Title of a video.
     * @param videoResolvable The URL, ID, or Title of the video.
     */
    getVideo(videoResolvable: string): Promise<Video>;
    /**
     * Get a [[Channel]] object from the Username, URL or ID of a channel.
     * @param channelResolvable The Username, URL or ID of the channel.
     */
    getChannel(channelResolvable: string): Promise<Channel>;
    /**
     * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     */
    getPlaylist(playlistResolvable: string): Promise<Playlist>;
    /**
     * Get a [[Comment]] object from the ID of a comment.
     * @param id The ID of the comment.
     */
    getComment(commentId: string): Promise<YTComment>;
    /**
     * Get a video object from the url of a video.
     * @deprecated Use getVideo() instead
     * @param url The url of the video.
     */
    getVideoByUrl(url: string): Promise<Video>;
    /**
     * Get a channel object from the url of a channel.
     * @deprecated Use getChannel() instead
     * @param url The url of the channel.
     */
    getChannelByUrl(url: string): Promise<Channel>;
    /**
     * Get a playlist object from the url of a playlist.
     * @deprecated Use getPlaylist() instead
     * @param url The url of the playlist.
     */
    getPlaylistByUrl(url: string): Promise<Playlist>;
    /**
     * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.
     */
    getPlaylistItems(playlistResolvable: string, maxResults?: number): Promise<Video[]>;
    /**
     * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.
     */
    getVideoComments(videoResolvable: string, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of comments to get from the channel. If <= 0 or not included, returns all comments on the channel.
     */
    getChannelComments(channelResolvable: string, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of playlists to get from the channel. If <= 0 or not included, returns all playlists.
     */
    getChannelPlaylists(channelResolvable: string, maxResults?: number): Promise<Playlist[]>;
    /**
     * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.
     * @param commentId The ID of the comment to get replies from.
     * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.
     */
    getCommentReplies(commentId: string, maxResults?: number): Promise<YTComment[]>;
}
declare type YouTubeOptions = {
    /**
     * Whether or not to cache entities.
     */
    cache?: boolean;
    /**
     * How long to cache entities in seconds (0 = unlimited).
     */
    cacheTTL?: number;
    /**
     * How often to check for and delete expired cached items in seconds.
     */
    cacheCheckInterval?: number;
    /**
     * Whether or not we should cache searches
     */
    cacheSearches?: boolean;
};
export default YouTube;
